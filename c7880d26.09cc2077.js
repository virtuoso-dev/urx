(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{90:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return o}));var r=a(3),n=a(7),b=(a(0),a(99)),c={id:"_urx_src_streams_",title:"Module: urx/src/streams",sidebar_label:"urx/src/streams",hide_title:!0},s={unversionedId:"api/modules/_urx_src_streams_",id:"api/modules/_urx_src_streams_",isDocsHomePage:!1,title:"Module: urx/src/streams",description:'Module: "urx/src/streams"',source:"@site/docs/api/modules/_urx_src_streams_.md",slug:"/api/modules/_urx_src_streams_",permalink:"/docs/api/modules/_urx_src_streams_",editUrl:"https://github.com/virtuoso-dev/urx/edit/master/packages/docs/docs/docs/api/modules/_urx_src_streams_.md",version:"current",sidebar_label:"urx/src/streams",sidebar:"docs",previous:{title:"Module: urx/src/pipe",permalink:"/docs/api/modules/_urx_src_pipe_"},next:{title:"Module: urx/src/system",permalink:"/docs/api/modules/_urx_src_system_"}},l=[{value:"Index",id:"index",children:[{value:"Functions",id:"functions",children:[]}]},{value:"Functions",id:"functions-1",children:[{value:"eventHandler",id:"eventhandler",children:[]},{value:"statefulStream",id:"statefulstream",children:[]},{value:"statefulStreamFromEmitter",id:"statefulstreamfromemitter",children:[]},{value:"stream",id:"stream",children:[]},{value:"streamFromEmitter",id:"streamfromemitter",children:[]}]}],i={rightToc:l};function o(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(b.b)("wrapper",Object(r.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"module-urxsrcstreams"},'Module: "urx/src/streams"'),Object(b.b)("p",null,'Streams are the basic building blocks of a reactive system. Think of them as the system permanent "data tubes".'),Object(b.b)("p",null,"A stream acts as both an ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.emitter"}),"Emitter")," and ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.publisher"}),"Publisher"),". Each stream can have multiple ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.subscription"}),"Subscriptions"),"."),Object(b.b)("p",null,"urx streams are either ",Object(b.b)("strong",{parentName:"p"},"stateless")," or ",Object(b.b)("strong",{parentName:"p"},"stateful"),".\nStateless streams emit data to existing subscriptions when published, without keeping track of it.\nStateful streams remember the last published value and immediately publish it to new subscriptions."),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import { stream, statefulStream, publish, subscribe } from "@virtuoso.dev/urx";\n\n// foo is a stateless stream\nconst foo = stream<number>();\n\npublish(foo, 42);\n// this subsription will not be called...\nsubscribe(foo, (value) => console.log(value));\n// it will only catch published values after it\npublish(foo, 43);\n\n// stateful streams always start with an initial value\nconst bar = statefulStream(42);\n\n// subscribing to a stateful stream\n// immediately calls the subscription with the current value\nsubscribe(bar, (value) => console.log(value));\n\n// subsequent publishing works just like stateless streams\npublish(bar, 43);\n')),Object(b.b)("h2",{id:"index"},"Index"),Object(b.b)("h3",{id:"functions"},"Functions"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/modules/_urx_src_streams_#eventhandler"}),"eventHandler")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/modules/_urx_src_streams_#statefulstream"}),"statefulStream")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/modules/_urx_src_streams_#statefulstreamfromemitter"}),"statefulStreamFromEmitter")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/modules/_urx_src_streams_#stream"}),"stream")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/api/modules/_urx_src_streams_#streamfromemitter"}),"streamFromEmitter"))),Object(b.b)("h2",{id:"functions-1"},"Functions"),Object(b.b)("h3",{id:"eventhandler"},"eventHandler"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"eventHandler"),"<T",">","(",Object(b.b)("inlineCode",{parentName:"p"},"emitter"),": ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.emitter"}),"Emitter"),"<T",">","): ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.emitter"}),"Emitter"),"<T",">"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/virtuoso-dev/urx/blob/35c5af3/packages/urx/src/streams.ts#L121"}),"urx/src/streams.ts:121"))),Object(b.b)("p",null,"Event handlers are special emitters which can have ",Object(b.b)("strong",{parentName:"p"},"at most one active subscription"),".\nSubscribing to an event handler unsubscribes the previous subscription, if present."),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const foo = stream<number>();\nconst fooEvent = eventHandler(foo);\n\n// will be called once with 42\nsubscribe(fooEvent, (value) => console.log(`Sub 1 ${value}`));\npublish(foo, 42);\n\n// unsubscribes sub 1\nsubscribe(fooEvent, (value) => console.log(`Sub 2 ${value}`));\npublish(foo, 43);\n")),Object(b.b)("h4",{id:"type-parameters"},"Type parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"T"))))),Object(b.b)("h4",{id:"parameters"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"emitter")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"/docs/api/interfaces/_urx_src_actions_.emitter"}),"Emitter"),"<T",">"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"the source emitter.")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.emitter"}),"Emitter"),"<T",">"),Object(b.b)("p",null,"the single-subscription emitter."),Object(b.b)("hr",null),Object(b.b)("h3",{id:"statefulstream"},"statefulStream"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"statefulStream"),"<T",">","(",Object(b.b)("inlineCode",{parentName:"p"},"initial"),": T): ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.statefulstream"}),"StatefulStream"),"<T",">"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/virtuoso-dev/urx/blob/35c5af3/packages/urx/src/streams.ts#L83"}),"urx/src/streams.ts:83"))),Object(b.b)("p",null,"Constructs a new stateful stream."),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const foo = statefulStream(42);\n")),Object(b.b)("h4",{id:"type-parameters-1"},"Type parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"T")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"the type of values to publish in the stream. If omitted, the function infers it from the initial value.")))),Object(b.b)("h4",{id:"parameters-1"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"initial")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"T"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"the initial value in the stream.")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.statefulstream"}),"StatefulStream"),"<T",">"),Object(b.b)("p",null,"a ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.statefulstream"}),"StatefulStream")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"statefulstreamfromemitter"},"statefulStreamFromEmitter"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"statefulStreamFromEmitter"),"<T",">","(",Object(b.b)("inlineCode",{parentName:"p"},"emitter"),": ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.emitter"}),"Emitter"),"<T",">",", ",Object(b.b)("inlineCode",{parentName:"p"},"initial"),": T): ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.statefulstream"}),"StatefulStream"),"<T",">"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/virtuoso-dev/urx/blob/35c5af3/packages/urx/src/streams.ts#L224"}),"urx/src/streams.ts:224"))),Object(b.b)("p",null,'Creates and connects a "junction" stateful stream to the specified emitter. Often used with ',Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/modules/_urx_src_pipe_#pipe"}),"pipe"),", to avoid the multiple evaluation of operator sets."),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const foo = stream<number>();\n\nconst fooX2 = pipe(\n  foo,\n  map((value) => {\n    console.log(`multiplying ${value}`);\n    return value * 2;\n  })\n);\n\nsubscribe(fooX2, (value) => console.log(value));\nsubscribe(fooX2, (value) => console.log(value));\n\npublish(foo, 42); // executes the map operator twice for each subscription.\n\nconst sharedFooX2 = statefulStreamFromEmitter(pipe(\n  foo,\n  map((value) => {\n    console.log(`shared multiplying ${value}`);\n    return value * 2;\n  })\n), 42);\n\nsubscribe(sharedFooX2, (value) => console.log(value));\nsubscribe(sharedFooX2, (value) => console.log(value));\n\npublish(foo, 42);\n")),Object(b.b)("h4",{id:"type-parameters-2"},"Type parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"T"))))),Object(b.b)("h4",{id:"parameters-2"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"emitter")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"/docs/api/interfaces/_urx_src_actions_.emitter"}),"Emitter"),"<T",">"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"initial")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"T"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"the initial value in the stream.")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.statefulstream"}),"StatefulStream"),"<T",">"),Object(b.b)("p",null,"the resulting stateful stream."),Object(b.b)("hr",null),Object(b.b)("h3",{id:"stream"},"stream"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"stream"),"<T",">","(): ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.stream"}),"Stream"),"<T",">"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/virtuoso-dev/urx/blob/35c5af3/packages/urx/src/streams.ts#L47"}),"urx/src/streams.ts:47"))),Object(b.b)("p",null,"Constructs a new stateless stream."),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const foo = stream<number>();\n")),Object(b.b)("h4",{id:"type-parameters-3"},"Type parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"T")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"the type of values to publish in the stream.")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.stream"}),"Stream"),"<T",">"),Object(b.b)("p",null,"a ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.stream"}),"Stream")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"streamfromemitter"},"streamFromEmitter"),Object(b.b)("p",null,"\u25b8 ",Object(b.b)("strong",{parentName:"p"},"streamFromEmitter"),"<T",">","(",Object(b.b)("inlineCode",{parentName:"p"},"emitter"),": ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.emitter"}),"Emitter"),"<T",">","): ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.stream"}),"Stream"),"<T",">"),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Defined in ",Object(b.b)("a",Object(r.a)({parentName:"em"},{href:"https://github.com/virtuoso-dev/urx/blob/35c5af3/packages/urx/src/streams.ts#L185"}),"urx/src/streams.ts:185"))),Object(b.b)("p",null,'Creates and connects a "junction" stream to the specified emitter. Often used with ',Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/modules/_urx_src_pipe_#pipe"}),"pipe"),", to avoid the multiple evaluation of operator sets."),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const foo = stream<number>();\n\nconst fooX2 = pipe(\n  foo,\n  map((value) => {\n    console.log(`multiplying ${value}`);\n    return value * 2;\n  })\n);\n\nsubscribe(fooX2, (value) => console.log(value));\nsubscribe(fooX2, (value) => console.log(value));\n\npublish(foo, 42); // executes the map operator twice for each subscription.\n\nconst sharedFooX2 = streamFromEmitter(pipe(\n  foo,\n  map((value) => {\n    console.log(`shared multiplying ${value}`);\n    return value * 2;\n  })\n));\n\nsubscribe(sharedFooX2, (value) => console.log(value));\nsubscribe(sharedFooX2, (value) => console.log(value));\n\npublish(foo, 42);\n")),Object(b.b)("h4",{id:"type-parameters-4"},"Type parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"T"))))),Object(b.b)("h4",{id:"parameters-3"},"Parameters:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"emitter")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"/docs/api/interfaces/_urx_src_actions_.emitter"}),"Emitter"),"<T",">")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/interfaces/_urx_src_actions_.stream"}),"Stream"),"<T",">"),Object(b.b)("p",null,"the resulting stream."))}o.isMDXComponent=!0},99:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return O}));var r=a(0),n=a.n(r);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},b=Object.keys(e);for(r=0;r<b.length;r++)a=b[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(r=0;r<b.length;r++)a=b[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=n.a.createContext({}),o=function(e){var t=n.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=o(e.components);return n.a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,b=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),m=o(a),u=r,O=m["".concat(c,".").concat(u)]||m[u]||p[u]||b;return a?n.a.createElement(O,s(s({ref:t},i),{},{components:a})):n.a.createElement(O,s({ref:t},i))}));function O(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var b=a.length,c=new Array(b);c[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var i=2;i<b;i++)c[i]=a[i];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);